package com.lambda;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.lambda.exceptions.IllegalParametersException;
import com.lambda.utils.HandlerParamUtils;

import java.util.HashMap;

import static org.apache.commons.lang3.StringUtils.isEmpty;


/**
 * Handler for API Gateway and ALB.
 * Types APIGatewayProxyRequestEvent and APIGatewayProxyResponseEvent allow this handler to
 * be invoked from AWS Gateway and ALB. It also allows to check health of lambda from enclosing
 * Target group.
 *
 * @author oklimenko@gmail.com
 */
public class Handler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent>{

    private static String paramMethod = "method";
    private static String paramRestData = "rest_data";
    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    @Override
    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent event, Context context) {

        String method = HandlerParamUtils.getParameterFromBody(event, paramMethod);
        String restData = HandlerParamUtils.getParameterFromBody(event, paramRestData);

        if (!"POST".equals(event.getHttpMethod())) {
            throw new IllegalParametersException("Expected POST method. Actual method: " + event.getHttpMethod());
        }
        if (isEmpty(method)) {
            throw new IllegalParametersException("Missing parameter: " + paramMethod);
        }
        if (isEmpty(method)) {
            throw new IllegalParametersException("Missing parameter: " + paramRestData);
        }

        APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent();
        response.setIsBase64Encoded(false);
        response.setStatusCode(200);
        HashMap<String, String> headers = new HashMap<String, String>();
        headers.put("Content-Type", "text/html");
        response.setHeaders(headers);
        response.setBody("<!DOCTYPE html><html><head><title>AWS Lambda sample</title></head><body>"+
                "<h1>Welcome</h1><p>Page generated by a Lambda function.</p>" +
                "</body></html>");
        // log execution details
        logEnvironment(event, context, gson);
        return response;
    }

    public static void logEnvironment(Object event, Context context, Gson gson)
    {
        LambdaLogger logger = context.getLogger();
        // log execution details
        logger.log("ENVIRONMENT VARIABLES: " + gson.toJson(System.getenv()));
        logger.log("CONTEXT: " + gson.toJson(context));
        // log event details
        logger.log("EVENT: " + gson.toJson(event));
        logger.log("EVENT TYPE: " + event.getClass().toString());
    }
}
